

import numpy as np
import core as cfc
import matplotlib.pyplot as plt

L = 5
P = 1

E = 2e11
A = 50e-4
I = 833333/E

element = 16
nodes = element + 1

# Create Edof
Edof = []
for i in range(element):
    Edof.append([3 * i + 1, 3 * i + 2, 3 * i + 3, 3 * i + 4, 3 * i + 5, 3 * i + 6])
Edof = np.asarray(Edof)

#Edof = np.array([[1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9], [7, 8, 9, 10, 11, 12], [10, 11, 12, 13, 14, 15], [13, 14, 15, 16, 17, 18], [16, 17, 18, 19, 20, 21], [19, 20, 21, 22, 23, 24], [22, 23, 24, 25, 26, 27]])


# Stiffness matrix K and load vector f
K = np.mat(np.zeros((nodes*3, nodes*3)))
f = np.mat(np.zeros((nodes*3, 1)))
# Force on nodes 1, 3, 5, 7
f[2] = -0.050
f[13] = -0.200
f[25] = -0.100
f[37] = -0.150

# Element property vector
ep = np.array([E, A, I])

# Element coordinate vectors
ex = np.array([0, L/element])
ey = np.array([0, 0])

# Element load vector
eq = [0, 0.000005]

# Element stiffness matrix Ke & fe
Ke1 = cfc.beam2e(ex, ey, ep)
Ke2, fe = cfc.beam2e(ex, ey, ep, eq)

# Global stiffness matrix
K = cfc.assem(Edof[0:2], K, Ke1)
K, f = cfc.assem(Edof[2:15], K, Ke2, f, fe)
K = cfc.assem(Edof[15:16], K, Ke1)

# Boundary conditions and solution
bc = np.array([49, 50, 51])
a, r = cfc.solveq(K, f, bc)

# Section Forces
Ed = cfc.extractEldisp(Edof, a)

es1, ed1, ec1 = cfc.beam2s(ex, ey, ep, Ed[0,:])
es2, ed2, ec2 = cfc.beam2s(ex, ey, ep, Ed[1,:], eq)
es3, ed3, ec3 = cfc.beam2s(ex, ey, ep, Ed[2,:], eq)
es4, ed4, ec4 = cfc.beam2s(ex, ey, ep, Ed[3,:], eq)
es5, ed5, ec5 = cfc.beam2s(ex, ey, ep, Ed[4,:], eq)
es6, ed6, ec6 = cfc.beam2s(ex, ey, ep, Ed[5,:], eq)
es7, ed7, ec7 = cfc.beam2s(ex, ey, ep, Ed[6,:], eq)
es8, ed8, ec8 = cfc.beam2s(ex, ey, ep, Ed[7,:], eq)
es9, ed9, ec9 = cfc.beam2s(ex, ey, ep, Ed[8,:], eq)
es10, ed10, ec10 = cfc.beam2s(ex, ey, ep, Ed[9,:], eq)
es11, ed11, ec11 = cfc.beam2s(ex, ey, ep, Ed[10,:], eq)
es12, ed12, ec12 = cfc.beam2s(ex, ey, ep, Ed[11,:], eq)
es13, ed13, ec13 = cfc.beam2s(ex, ey, ep, Ed[12,:], eq)
es14, ed14, ec14 = cfc.beam2s(ex, ey, ep, Ed[13,:], eq)
es15, ed15, ec15 = cfc.beam2s(ex, ey, ep, Ed[14,:], eq)
es16, ed16, ec16 = cfc.beam2s(ex, ey, ep, Ed[15,:], eq)

es = np.asarray(cfc.beam2s(ex, ey, ep, Ed[0,:], eq)[0][0])
print(es, '"es1"')
print(es1, 'es1')

M = [es1[0, 2], es2[0, 2], es3[0, 2], es4[0, 2], es5[0, 2], es6[0, 2], es7[0, 2], es8[0, 2], es9[0, 2], es10[0, 2], es11[0, 2], es12[0, 2], es13[0, 2], es14[0, 2], es15[0, 2], es16[0, 2], es16[1, 2]]
Q = [es1[0, 1], es2[0, 1], es3[0, 1], es4[0, 1], es5[0, 1], es6[0, 1], es7[0, 1], es8[0, 1], es9[0, 1], es10[0, 1], es11[0, 1], es12[0, 1], es13[0, 1], es14[0, 1], es15[0, 1], es16[0, 1], es16[1, 1]]
N = [es1[0, 0], es2[0, 0], es3[0, 0], es4[0, 0], es5[0, 0], es6[0, 0], es7[0, 0], es8[0, 0], es9[0, 0], es10[0, 0], es11[0, 0], es12[0, 0], es13[0, 0], es14[0, 0], es15[0, 0], es16[0, 0], es16[1, 0]]

x = np.linspace(0, 5, nodes)
#xx = np.linspace(0, 1, 100)
#yy = np.linspace(0, 0, 100)
#plt.plot(xx, yy,'--')

# MOMENTDIAGRAM
plt.figure()
plt.grid()
plt.plot(x, -np.asarray(M), linewidth=4)
plt.ylabel('Momentkraft [Nm]', size=10)
plt.xlabel('Balkens längd [m]', size=10)
plt.title('Momentdiagram', size=20)
#plt.show()

# TVÄRKRAFTDIAGRAM
plt.figure()
plt.grid()
plt.plot(x, -np.asarray(Q), linewidth=4)
plt.ylabel('Tvärkraft [N]', size=10)
plt.xlabel('Balkens längd [m]', size=10)
plt.title('Tvärkraftsdiagram', size=20)
#plt.show()

# NORMALKRAFTDIAGRAM
plt.figure()
plt.grid()
plt.plot(x, -np.asarray(N), linewidth=4)
plt.ylabel('Normalkraft [N]', size=10)
plt.xlabel('Balkens längd [m]', size=10)
plt.title('Normalkraftsdiagram', size=20)
plt.show()

# DEFORMATION
plt.figure()
y=[]
for i in range(nodes):
    y.append(a[3*i+1])
plt.plot(x, np.asarray(y).reshape((nodes,)),linewidth=8)
plt.plot([0, 5], [0, 0],'--',linewidth=4)
balle = np.min(y)
plt.ylim(top=-balle*1.5,bottom=balle*1.5)
plt.title("Balkens utböjning",size=20)
plt.legend(['Balkens utböjning','Normallinje'])
plt.ylabel('Balkens utböjning [m]', size = 10)
plt.xlabel('Balkens längd [m]', size = 10)
plt.show()
